name: Build

on:
  push:
    branches:
      - main
    tags:
      - "v*"
  pull_request:

env:
  COMMIT_SHA: ${{ github.event.pull_request.head.sha }}
  # A unique number for each workflow run within a repository.
  # This number does not change if you re-run the workflow run.
  RUN_ID: ${{ github.run_id }}
  # A unique number for each run of a particular workflow in a repository.
  # This number begins at 1 for the workflow's first run, and increments with each new run.
  # This number does not change if you re-run the workflow run.
  RUN_NUMBER: ${{ github.run_number }}
  # A unique number for each attempt of a particular workflow run in a repository.
  # This number begins at 1 for the workflow run's first attempt, and increments with each re-run.
  RUN_ATTEMPT: ${{ github.run_attempt }}
  PULL_NUMBER: ${{ github.event.pull_request.number }}
  MIN_TESTCOV: 80

jobs:
  detect-noop:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.noop.outputs.should_skip }}
      paths_result: ${{ steps.noop.outputs.paths_result }}
    steps:
      - name: Detect No-op Changes
        # https://github.com/fkirc/skip-duplicate-actions
        id: noop
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths_ignore: '["**.md", "**.png", "**.jpg", "**/Documentation/**"]'
          do_not_skip: '["push","schedule","release"]'
          concurrent_skipping: false
          paths_filter: |
            go:
              paths:
                - '**/*.go'
            version:
              paths:
                - '.VERSION'

  UnitTest:
    needs:
      - detect-noop
    runs-on: ubuntu-latest
    steps:
      - name: Create code coverage status for the current commit
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' && needs.detect-noop.outputs.should_skip != 'true'
        run: |
          curl "https://${GIT_USER}:${GIT_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" -d "{\"state\": \"pending\",\"target_url\": \"https://github.com/${GITHUB_REPOSITORY}/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"in progress â€” This check has started... \",\"context\": \"code cov\"}"
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_USER: ${{ github.actor }}

      - name: Install Protoc
        uses: arduino/setup-protoc@v3.0.0

      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
        #   submodules: true

      # - name: Fetch History
      #   run: |
      #     git fetch --prune --unshallow

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Prepare
        run: make vars tools

      - name: Proto
        run: make build proto

      - name: Test
        if: github.event_name == 'push'
        run: |
          # need to pull deps for generated files
          go mod tidy
          make test

      - name: CovTest
        if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]' && needs.detect-noop.outputs.should_skip != 'true'
        run: |
          # need to pull deps for generated files
          go mod tidy
          make covtest
          set -x && \
          total=`go tool cover -func=coverage.out | grep total | grep -Eo '[0-9]+\.[0-9]+'` && \
          echo "${GIT_USER}: total cov: $total" && \
          (( $(echo "$total > ${MIN_TESTCOV}" | bc -l) )) && STATE=success || STATE=failure && \
          curl "https://${GIT_USER}:${GIT_TOKEN}@api.github.com/repos/${GITHUB_REPOSITORY}/statuses/${COMMIT_SHA}" -d "{\"state\": \"${STATE}\",\"target_url\": \"https://github.com/${GITHUB_REPOSITORY}/pull/${PULL_NUMBER}/checks?check_run_id=${RUN_ID}\",\"description\": \"${total}%\",\"context\": \"code cov\"}"
        env:
          GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GIT_USER: ${{ github.actor }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Registry
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Cache Docker layers
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Docker meta
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: docker_meta
        uses: docker/metadata-action@v5
        with:
          # list of Docker images to use as base name for tags
          images: |
            effectivesecurity/protoc-gen-go
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Docker push
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: docker_build
        uses: docker/build-push-action@v6
        with:
          file: ./Dockerfile
          context: .
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max

      - name: Detect Version Changes
        # https://github.com/fkirc/skip-duplicate-actions
        id: version-changed
        uses: fkirc/skip-duplicate-actions@v5.3.1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          paths: '[".VERSION"]'
          paths_filter: |
            version:
              paths:
                - '.VERSION'
              backtracking: 1

      - name: set-tag
        run: |
          VERSION=$(cat .VERSION).${{env.RUN_NUMBER}}
          echo "VERSION: ${VERSION}"
          echo "DIST_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "git tag ${VERSION}"

      - name: Create Tag
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && fromJSON(steps.version-changed.outputs.paths_result).version.should_skip == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            const {DIST_VERSION} = process.env          
            github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/tags/${DIST_VERSION}`,
                sha: context.sha
            })
