syntax = "proto3";
package e2e;

option go_package = "github.com/effective-security/protoc-gen-go/e2e";
import "es/api/annotations.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "e2e.proto";

service Status {
    // Version returns the server version.
    rpc Version(google.protobuf.Empty) returns (ServerVersion) {
        option (google.api.http) = {
            get: "/v1/status/version"
        };
        option (es.api.allowed_roles) = "admin";
    }

    // Server returns the server status.
    rpc Server(google.protobuf.Empty) returns (ServerStatusResponse) {
        option (google.api.http) = {
            get: "/v1/status/server"
        };
        option (es.api.allowed_roles) = "user";
    }

    // Caller returns the caller status.
    rpc Caller(google.protobuf.Empty) returns (CallerStatusResponse) {
        option (google.api.http) = {
            get: "/v1/status/caller"
        };
    }

    // Search is for testing nested and recursive types.
    rpc Search(google.protobuf.Empty) returns (SearchResponse) {
        option (google.api.http) = {
            get: "/v1/search"
        };
    }

    // Search is for testing nested and recursive types.
    rpc SearchOld(google.protobuf.Empty) returns (SearchResponseOld) {
        option (google.api.http) = {
            get: "/v1/search/old"
        };
        option deprecated = true;
    }
}

// ServerVersion provides server build and runtime version
message ServerVersion {
    option (es.api.generate_meta) = true;

    // Build is the server build version.
    string Build = 1 [json_name = "Build"];
    // Runtime is the runtime version.
    string Runtime = 2 [json_name = "Runtime"];
}

// ServerStatus provides server status information
message ServerStatus {
    option (es.api.generate_meta) = true;

    // Name of the server or application.
    string Name = 1 [json_name = "Name"];
    // Nodename is the human-readable name of the cluster member,
    // or empty for single host.
    string Nodename = 2 [json_name = "Nodename"];
    // Hostname is operating system's host name.
    string Hostname = 3 [json_name = "Hostname"];
    // ListenURLs is the list of URLs the service is listening on.
    repeated string ListenUrls = 4 [json_name = "ListenUrls"];
    // StartedAt is the time when the server has started.
    google.protobuf.Timestamp StartedAt = 5
        [json_name = "StartedAt", (es.api.display) = "Started At"];

    // Status of the server.
    // Can be one of:
    // `Running`, `Failed`, `Stopped`.
    ServiceStatus.Enum Status = 6
        [json_name = "Status", (es.api.display) = "Status"];
}

// ServerStatusResponse returns status and version
message ServerStatusResponse {
    option (es.api.generate_meta) = true;

    // Status of the server.
    ServerStatus Status = 1 [json_name = "Status", (es.api.search) = "object"];

    // Version of the server.
    ServerVersion Version = 2
        [json_name = "Version", (es.api.search) = "object"];

    repeated ServerVersion Versions = 3 [json_name = "Versions"];
}

// CallerStatusResponse returns the caller information
message CallerStatusResponse {
    option (es.api.generate_meta) = true;

    // Subject of the caller.
    string Subject = 1
        [json_name = "Subject", (es.api.search) = "keyword,with_text"];
    // Role of the caller. Can be one of `Admin`, `User`.
    string Role = 2 [json_name = "Role", (es.api.search) = "text,with_keyword"];
    // Claims from the token, json encoded map[string]interface{}
    bytes Claims = 3
        [json_name = "Claims", (es.api.search) = "no_index,exclude"];

    google.protobuf.Struct Properties = 4 [json_name = "Properties"];

    map<string, Role> RoleMap = 5 [json_name = "RoleMap"];
}

// ServiceStatus provides status
message ServiceStatus {
    enum Enum {
        // Unknown status is used when the status is not known.
        Unknown = 0;
        // Running status is used when the service is running.
        //
        // Second line of the description.
        Running = 0x2;
        Failed  = 0x10 [
            (es.api.enum_args) = "error, code",
            (es.api.enum_description) =
                "Failed status has error code and message"
        ];
        // All is a bitmask of all statuses.
        All = 0x7fffffff;
    }
}

enum Role {
    Unknown = 0 [
        (es.api.enum_description) = "Unknown role",
        (es.api.enum_display)     = "Unknown"
    ];
    Admin = 0x2 [
        (es.api.enum_description) = "Administrator role",
        (es.api.enum_display)     = "Administrator",
        (es.api.enum_group)       = "Admins"
    ];
    Owner = 0x4 [
        (es.api.enum_description) = "Owner role",
        (es.api.enum_display)     = "Owner",
        (es.api.enum_group)       = "Admins"
    ];
    User = 0x10 [
        (es.api.enum_description) = "User role",
        (es.api.enum_display)     = "User",
        (es.api.enum_group)       = "Users"
    ];
    Viewer = 0x20 [
        (es.api.enum_description) = "Viewer role",
        (es.api.enum_display)     = "Viewer",
        (es.api.enum_group)       = "Users"
    ];
}

message SearchResponse {
    // Found specifies the total number of documents that match the search
    // request.
    uint32 Found = 1 [json_name = "Found"];
    // Facets returns the requested aggregation information in facet format.
    repeated Facet Facets = 4 [json_name = "Facets"];
    string NotUsed        = 5 [json_name = "NotUsed", deprecated = true];
}

message SearchResponseOld {
    option deprecated = true;

    uint32 Found          = 1 [json_name = "Found"];
    repeated Facet Facets = 4 [json_name = "Facets"];
}

// SearchBucket represents bucket
message SearchBucket {
    string Value       = 1 [json_name = "Value"];
    uint32 Count       = 2 [json_name = "Count"];
    string DisplayName = 3 [json_name = "DisplayName"];
    // Facets is a list of sub-facets
    repeated Facet Facets = 4 [json_name = "Facets"];
}

// Facet represents facet info
message Facet {
    string Name                   = 1 [json_name = "Name"];
    repeated SearchBucket Buckets = 2 [json_name = "Buckets"];
    string DisplayName            = 3 [json_name = "DisplayName"];
    // Count is the count of documents in the facet matching the query
    uint32 Count = 4 [json_name = "Count"];
    // Facets is a list of sub-facets
    repeated Facet Facets = 5 [json_name = "Facets"];
}

message WithGeneric {
    option (es.api.generate_meta) = true;

    Generic Generic         = 1 [json_name = "Generic"];
    VendorsData VendorsData = 2 [json_name = "VendorsData"];
}