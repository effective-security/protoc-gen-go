syntax = "proto3";

package e2e;
option go_package = "github.com/effective-security/protoc-gen-go/e2e";

import "google/protobuf/timestamp.proto";
import "es/api/annotations.proto";

// Basic just tests basic fields, including oneofs and so on that don't
// generally work automatically with encoding/json.
message Basic {
    option (es.api.generate_meta) = true;

    string a = 1;

    oneof b {
        int32 int  = 2;
        string str = 3;
        uint64 id  = 4;
    }

    map<string, string> map           = 5;
    google.protobuf.Timestamp created = 6;

    JobStatus.Enum statuses          = 7;
    ResourceType.Enum resource_types = 8;

    string name = 9 [json_name = "Name", (es.api.min) = 8, (es.api.max) = 64];
    repeated string values = 10
        [json_name = "Values", (es.api.min_count) = 1, (es.api.max_count) = 10];
}

// Nested for testing nested types
message Nested {
    message Message {
        // Basic type
        Basic basic = 1;
    }
}

message JobStatus {
    // JobStatus provides status
    enum Enum {
        option (es.api.is_bitmask) = true;

        Unknown   = 0;
        Scheduled = 0x1;
        Running   = 0x2;
        Succeeded = 0x4;
        Failed    = 0x10;
        Cancelled = 0x20;
        All       = 0x7fffffff;
    }
}

message ResourceType {
    // ResourceType provides status
    enum Enum {
        option (es.api.is_bitmask) = true;

        Unknown        = 0;
        EC2Instance    = 0x1;
        S3Bucket       = 0x2;
        LambdaFunction = 0x4;
        All            = 0x7fffffff;
    }
}

message Generic {
    option (es.api.generate_meta) = true;

    // Generic is a generic message
    message Message {
        string name = 1;
        string id   = 2;

        Nested nested = 3;
    }

    // Generic is a generic message
    repeated Message messages = 1;

    string name                     = 2;
    uint64 id                       = 3;
    uint32 count                    = 4;
    int64 size                      = 5;
    bool enabled                    = 6;
    bytes data                      = 7;
    float value                     = 8;
    double price                    = 9;
    map<string, string> map         = 10;
    ResourceType.Enum resource_type = 11
        [json_name = "ResourceType", (es.api.display) = "Resource"];

    Nested.Message nested = 12;
}

message VectorScore {
    string Vector = 1 [json_name = "Vector"];
    double Score  = 2 [json_name = "Score"];
}

message Cvss {
    VectorScore V2 = 3 [json_name = "V2"];
    VectorScore V3 = 4 [json_name = "V3"];
    VectorScore V4 = 5 [json_name = "V4"];
}

message VendorSeverity {
    string Vendor = 1 [json_name = "Vendor"];
    Cvss Cvss     = 3 [json_name = "Cvss"];
}

message VendorsData {
    repeated VendorSeverity Vendors = 1 [json_name = "Vendors"];
}
