package proxygen

import (
	"io"
	"path"
	"strings"
	"text/template"

	"github.com/Masterminds/sprig/v3"
	"github.com/effective-security/porto/xhttp/httperror"
	"github.com/effective-security/xlog"
	"github.com/pkg/errors"
	"google.golang.org/protobuf/compiler/protogen"
)

var logger = xlog.NewPackageLogger("github.com/effective-security/protoc-gen-go", "go-proxy")

// simply add ref
var _ = httperror.Error{}

// Options are the options to set for rendering the template.
type Options struct {
	// Package provides package name for the Mock
	Package string
	// Prefix specifies prefix to be added to message types:
	// {{.Prefix}}{{.Message.GoName}}
	// If not provided, the the package name of the process file will be used.
	Prefix string
}

// This function is called with a param which contains the entire definition of a method.
func ApplyTemplate(w io.Writer, f *protogen.File, opts Options) error {
	if opts.Prefix == "" {
		opts.Prefix = string(f.GoPackageName) + "."
	}
	if !strings.HasSuffix(opts.Prefix, ".") {
		opts.Prefix = opts.Prefix + "."
	}

	if err := headerTemplate.Execute(w, tplHeader{
		File:    f,
		Options: opts,
	}); err != nil {
		return errors.Wrapf(err, "failed to execute template: %s", f.GeneratedFilenamePrefix)
	}

	return applyServices(w, f.Services, opts)
}

func applyServices(w io.Writer, svcs []*protogen.Service, opts Options) error {
	for _, svc := range svcs {
		logger.Infof("Processing %s", svc.GoName)

		proxyName := "proxy" + svc.GoName + "Server"
		clientName := "proxy" + svc.GoName + "Client"
		if err := serviceTemplate.Execute(w, tplService{
			Service:          svc,
			Options:          opts,
			ProxyStructName:  proxyName,
			ClientStructName: clientName,
			ServerName:       svc.GoName + "Server",
			ClientName:       svc.GoName + "Client",
		}); err != nil {
			return errors.Wrapf(err, "failed to execute template: %s", svc.GoName)
		}

		for _, met := range svc.Methods {
			if err := methodTemplate.Execute(w, tplMethod{
				Method:           met,
				Options:          opts,
				ProxyStructName:  proxyName,
				ClientStructName: clientName,
			}); err != nil {
				return errors.Wrapf(err, "failed to execute template: %s", met.GoName)
			}
		}
	}

	return nil
}

func tempFuncs() template.FuncMap {
	m := sprig.TxtFuncMap()
	m["type"] = func(f *protogen.Message) string {
		return path.Base(string(f.GoIdent.GoImportPath)) + "." + f.GoIdent.GoName
	}
	return m
}

type tplHeader struct {
	Options

	File *protogen.File
}

type tplService struct {
	Options

	Service          *protogen.Service
	ProxyStructName  string
	ClientStructName string
	ServerName       string
	ClientName       string
}

type tplMethod struct {
	Options

	Method           *protogen.Method
	ProxyStructName  string
	ClientStructName string
}

var (
	headerTemplate = template.Must(template.New("header").
			Funcs(tempFuncs()).
			Parse(`
// Code generated by protoc-gen-go-proxy. DO NOT EDIT.
// source: {{.File.Proto.Name}}

package {{.Package}}

import (
	"context"

	{{.File.GoImportPath}}
	"google.golang.org/protobuf/proto"
	"github.com/effective-security/porto/xhttp/httperror"
)
`))

	serviceTemplate = template.Must(template.New("service").
			Funcs(tempFuncs()).
			Parse(`

type {{.ProxyStructName}} struct {
	srv {{.Prefix}}{{.ServerName}}
}

type {{.ClientStructName}} struct {
	remote   {{.Prefix}}{{.ClientName}}
	callOpts []grpc.CallOption
}

// {{.Service.GoName}}ServerToClient returns {{.Prefix}}{{.ClientName}}
func {{.Service.GoName}}ServerToClient(srv {{.Prefix}}{{.ServerName}}) {{.Prefix}}{{.ClientName}} {
	return &{{.ProxyStructName}}{srv}
}

// New{{.ClientName}} returns instance of the {{.ClientName}}
func New{{.ClientName}}(conn *grpc.ClientConn, callOpts []grpc.CallOption) {{.Prefix}}{{.ServerName}} {
	return &{{.ClientStructName}}{
		remote:   {{.Prefix}}New{{.ClientName}}(conn),
		callOpts: callOpts,
	}
}

// New{{.ClientName}}FromProxy returns instance of {{.ClientName}}
func New{{.ClientName}}FromProxy(proxy {{.Prefix}}{{.ClientName}}) {{.Prefix}}{{.ServerName}} {
	return &{{.ClientStructName}}{
		remote: proxy,
	}
}

`))

	methodTemplate = template.Must(template.New("method").
			Funcs(tempFuncs()).
			Parse(`

{{- .Method.Comments.Leading -}}
func (s *{{.ProxyStructName}}) {{.Method.GoName}}(ctx context.Context, req *{{type .Method.Input}}, opts ...grpc.CallOption) (*{{type .Method.Output}}, error) {
	res, err := s.srv.{{.Method.GoName}}(ctx, req)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

{{ .Method.Comments.Leading -}}
func (s *{{.ClientStructName}}) {{.Method.GoName}}(ctx context.Context, req *{{type .Method.Input}}) (*{{type .Method.Output}}, error) {
	res, err := s.remote.{{.Method.GoName}}(ctx, req, s.callOpts...)
	if err != nil {
		return nil, httperror.NewFromPb(err)
	}
	return res, nil
}

`))
)
